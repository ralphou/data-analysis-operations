/*------------------------------------------------------------------------------
  Create a table of hisFormula records formatted for display.
  
  Arguments: 
  equipRef       Ref<equip>, optional, target equipRef filter
  debugViewStr   Str, view name used for debug uri
  filterStr      Str, apply filter to calculated point dis and formula navName
------------------------------------------------------------------------------*/

(nodeRef:null, debugViewStr:"viHisFormulaDebug", filterStr:null) => do
  node: try readById(nodeRef) catch null
  
  grid: if (node==null)
          readAll(hisFormula)
        else if (node.has("space")) 
          readAll(hisFormula and calculatedPointRef->spaceRef==nodeRef)
        else
          readAll(hisFormula and calculatedPointRef->equipRef==nodeRef)
  
  // Filter
  if (filterStr != null and isStr(filterStr))
    grid= grid.findAll(row =>
      reMatches("(?i).*"+filterStr+".*",
        row["calculatedPointRef"].refDis + " " + row["navName"]))
  
  coeffCols: ["a","b","c","d","e","f","g","h","i","j","k","l","m",
              "n","o","p","q","r","s","t","u","v","w","x","y","z"]

  /*----------------------------------------------------------------------------
  // Manage external references
  ----------------------------------------------------------------------------*/
  // List of external references
  externIds: grid.colToList("calculatedPointRef")
  coeffCols.each colName =>
    try
      externIds= externIds
      .addAll(grid.colToList(colName).findAll(v => isRef(v)))
    catch 
      null
  
  // Query the references
  externRecs: xq()
  .xqReadByIds(externIds)
  .xqExecute()

  // Update local extern records
  externRecs.each rec => try externUpdate(rec->id, {dis: rec.dis()}) catch null

  /*----------------------------------------------------------------------------
  // Add columns
  ----------------------------------------------------------------------------*/
  // Add hisErr and hisComputeStatus
  grid= grid
  .addCol("hisErr", r => try readById(r->calculatedPointRef)->hisErr
                         catch null)

  // Add debug link
  grid= grid
  .addCol("debug", r => try
    uiLink({view: debugViewStr,
            state:{calcPtRef: r->calculatedPointRef,
                   span: if (r.has("endDateTime"))
                           (r->endDateTime-1day..r->endDateTime).toSpan
                         else yesterday().toSpan(),
                   limit: 100000,
                   maxGap: r->calculatedPointRef->hisInterval}})
    catch null)
  .addColMeta("debug",
              {dis: "Link",
               format:"Debug View"})
  
  // Add depth
  /*grid= grid.addCol("depth", r => do
    hisFormulaDepth(r->calculatedPointRef)
  end)*/
  
  // Display
  disCols: ["calculatedPointRef","navName","hisFormula",
            "startDateTime","endDateTime","hisErr","debug"]
           .addAll(coeffCols)
            
  grid
  .toolFormatGrid(disCols)
  .sort((a,b) =>
    (try readById(a->calculatedPointRef).dis() + a["startDateTime"] catch null)
    <=>
    (try readById(b->calculatedPointRef).dis() + b["startDateTime"] catch null))
end

/*------------------------------------------------------------------------------
  Updates
  2021-09-20  Raphael Vitti
    Created.
------------------------------------------------------------------------------*/
